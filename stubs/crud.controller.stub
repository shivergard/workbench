<?php namespace {{vendor}}\{{name}};

use \Session;

class CrudController extends \{{vendor}}\{{name}}\PackageController  {

	public $bladeDir = '{{lower_name}}::crud';

	public	$rules = array(
		'name'       => 'required'
	);

	public $constantFilters = array();

	public function clearSession(){
		$prefix = $this->getClassName();
		$modelName = $this->model;
		$list = new $modelName();
		$fields = $this->getAllColumnsNames($list , true);

		foreach ($fields as $key => $value) {
			Session::forget('filter_'.$prefix.'_'.$value);
		}
	}

	public function buildSession($inputs){
		$prefix = $this->getClassName();
		foreach ($inputs as $key => $input){
			if (strlen(trim($input)) > 0 && !in_array($key , array('_token' , 'created_at' , 'updated_at')))
				Session::put('filter_'.$prefix.'_'.$key , $input);
		}
	}

	public function getFilteredList($list , $inPage = false){

		$return = false;
		$modelName = $this->model;
		$blankItem = new $modelName();
		//\DB::enableQueryLog();

		if (!$inPage){
			//$pg = Settings::where('name' , "=" , 'pagination_lenght')->first();
			$inPage = 5;//$pg->value;
		}

		$fields = $this->getAllColumnsNames($blankItem , true);
		$prefix = $this->getClassName();

		foreach ($fields as $key) {
			if (Session::has('filter_'.$prefix.'_'.$key)){
				$list->where($key , "=" , Session::get('filter_'.$prefix.'_'.$key));
			}
		}

		if (count($this->constantFilters) > 0){
			foreach ($this->constantFilters as $key => $value) {
				$list->where($key , "=" , $value);
			}
		}


		if (Session::has('filter_'.$prefix.'_from') && Session::has('filter_'.$prefix.'_till'))
			$list = $list->whereBetween('created_at', array(Session::get('filter_'.$prefix.'_from').' 0:00:00', Session::get('filter_'.$prefix.'_till').' 23:59:59'));


		if (
				session('filter_'.$prefix.'_order_by') 
				&& in_array(session('filter_'.$prefix.'_order_by') , $blankItem->getAllColumnsNames(true) )
				&& ( session('filter_'.$prefix.'_asc') == "true" || session('filter_'.$prefix.'_desc') == "true")
			){
			$list = $list->orderBy(session('filter_'.$prefix.'_order_by'), ( session('filter_'.$prefix.'_asc') == "true" ? 'asc' : 'desc'));
		}else{
			$list = $list->orderBy('created_at', 'desc');
		}

		//$list->get();dd(\DB::getQueryLog());
		return $list;
	}


	public function getClassName($full = false) {
		return '\\'.get_called_class();
    }

    public function getAllColumnsNames($list , $forced = false){
    	if (!isset($this->cols) || !$this->cols)
    		$return = array_diff(
    			$list->getAllColumnsNames($forced) , 
    			array_keys($this->constantFilters)
    		);
    	else
    		$return = $this->cols;

    	return $return;
    }

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index(){

		//hardCode style @todo review please
		$modelName = $this->model;
		if ($modelName::count() == 0)
			return \Redirect::to(action($this->getClassName(true)."@create"));
		$list = $modelName::orderBy('id', 'DESC');
		$list = $this->getFilteredList($list)->paginate(4);	

		$blankItem = new $modelName();

		$view = view($this->bladeDir.'.index' , array(
			'list' => $list,
			'fields' => $this->getAllColumnsNames($blankItem),
			'controller' => $this->getClassName(true),
			'prefix' => $this->getClassName()
		));

		if (isset($this->layout) && $this->layout){
			return View($this->layout , array('content' => $view));
		}else{
			return $view;
		}

		
	}


	public function filter(){
		if (\Input::has('clear')){
			$this->clearSession();
		}

		$this->buildSession(\Input::all());
		return \Redirect::to(action($this->getClassName(true)."@index"));
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create(){
		$modelName = $this->model;
		$list = new $modelName();
		$view = View($this->bladeDir.'.create' , array(
			'fields' => $this->getAllColumnsNames($list , true),
			'controller' => $this->getClassName(true)
		));

		if (isset($this->layout) && $this->layout){
			return View($this->layout , array('content' => $view));
		}else{
			return $view;
		}
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @return Response
	 */
	public function store(){

		if (\Input::has('crud_filter')){
			if (\Input::has('clear')){
				$this->clearSession();
			}

			$this->buildSession(\Input::all());
			//dd(Session::all());
			return \Redirect::to(action($this->getClassName(true)."@index"));
		}

		// validate
		// read more on validation at http://laravel.com/docs/validation

		$validator = \Validator::make(\Input::all(), $this->rules);

		// process the login
		if ($validator->fails()) {
			return \Redirect::to(action($this->getClassName(true)."@create"))
				->withErrors($validator)
				->withInput(\Input::except('password'));
		} else {
			// store
			$modelName = $this->model;
			$list = new $modelName();

			foreach ($list->getAllColumnsNames(true) as $key => $field_name) {
				$list->$field_name = \Input::get($field_name);
			}

			foreach ($this->constantFilters as $fieldName => $fieldValue) {
				$list->$fieldName = $fieldValue;
			}

			$list->save();

			// redirect
			\Session::flash('message', 'Successfully created!');
			return \Redirect::to(action($this->getClassName(true)."@index"));
		}
	}

	/**
	 * Display the specified resource.
	 *dd
	 * @param  int  $iddd @return Response
	 */
	public function show($id){
		$modelName = $this->model;
		$list = $modelName::find($id);
		$view = view($this->bladeDir.'.view' , array(
				'list' => $list,
				'fields' => $this->getAllColumnsNames($list),
				'controller' => $this->getClassName(true),
		));

		if (isset($this->layout) && $this->layout){
			return View($this->layout , array('content' => $view));
		}else{
			return $view;
		}
		
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id){
		$modelName = $this->model;
		$list = $modelName::find($id);
		$view = view($this->bladeDir.'.edit' , array(
				'list' => $list,
				'fields' => $this->getAllColumnsNames($list , true),
				'controller' => $this->getClassName(true),
				'model_name' => $modelName

		));

		if (isset($this->layout) && $this->layout){
			return View($this->layout , array('content' => $view));
		}else{
			return $view;
		}
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id){
		// validate
		// read more on validation at http://laravel.com/docs/validation

		$validator = \Validator::make(\Input::all(), $this->rules);

		// process the login
		if ($validator->fails()) {
			return \Redirect::to(action($this->getClassName(true)."@edit" , array('id' => $id)))
				->withErrors($validator)
				->withInput(\Input::except('password'));
		}else{
			// store
			$modelName = $this->model;
			$list = $modelName::find($id);
			foreach ($this->getAllColumnsNames($list , true) as $key => $field_name) {
				$list->$field_name = \Input::get($field_name);
			}
			$list->save();

			// redirect
			\Session::flash('message', 'Successfully updated!');
			return \Redirect::to(action($this->getClassName(true)."@index"));
		}
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id){
		// delete

		$modelName = $this->model;
		$itemCount = $modelName::where('id' , intval($id))->count();

		if ($itemCount > 0){
			$item = $modelName::where('id' , intval($id))->first();
			$item->delete();
		}
		
		// redirect
		Session::flash('message', 'Successfully deleted !');
		return \Redirect::to(action($this->getClassName(true)."@index"));
	}

}